// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data.Context;

#nullable disable

namespace Server.Data.Migrations
{
    [DbContext(typeof(ServerContext))]
    [Migration("20221023171541_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("Server.Data.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Server.Data.Entities.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReady")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Move")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoundId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RoomId");

                    b.HasIndex("RoundId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("Server.Data.Entities.Room", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<long>("CreationTimeTicks")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFull")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UpdateTicks")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Server.Data.Entities.Round", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long>("FinishTimeTicks")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<long>("StartTimeTicks")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UpdateTicks")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.ToTable("Round");
                });

            modelBuilder.Entity("Server.Data.Entities.Statistics", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Draws")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Loss")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TimeSpent")
                        .HasColumnType("TEXT");

                    b.Property<int>("UsedPaper")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedRock")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedScissors")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WinLossRatio")
                        .HasColumnType("REAL");

                    b.Property<int>("Wins")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("Server.Data.Entities.Player", b =>
                {
                    b.HasOne("Server.Data.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Server.Data.Entities.Room", null)
                        .WithMany("Players")
                        .HasForeignKey("RoomId");

                    b.HasOne("Server.Data.Entities.Round", null)
                        .WithMany("Players")
                        .HasForeignKey("RoundId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Server.Data.Entities.Round", b =>
                {
                    b.HasOne("Server.Data.Entities.Room", "Room")
                        .WithOne("Round")
                        .HasForeignKey("Server.Data.Entities.Round", "RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Server.Data.Entities.Statistics", b =>
                {
                    b.HasOne("Server.Data.Entities.Account", "Account")
                        .WithOne("Statistics")
                        .HasForeignKey("Server.Data.Entities.Statistics", "AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Server.Data.Entities.Account", b =>
                {
                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("Server.Data.Entities.Room", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Server.Data.Entities.Round", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
